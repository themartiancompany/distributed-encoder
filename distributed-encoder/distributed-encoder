#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

_root_requirements() {
  _check_cmd \
    "mediasplit" \
    "media-tools"
  _check_cmd \
    "remote-encoder" \
    "remote-encoder"
  _check_cmd \
    "vidcat" \
    "media-tools"
}

# shellcheck disable=SC2034
_global_variables() {
  encode_date=""
  target_hosts=()
  in_file=""
  out_file=""
  color=""
  quiet=""
}

_distributed_encoder() {
  local \
    _in="${1}" \
    _out="${2}" \
    _host \
    _hosts=() \
    _vid \
    _vids=() \
    _h \
    _mediasplit_opts=() \
    _remote_encoder_opts=() \
    _encoder_opts=() \
    _vidcat_opts=() \
    _pids=() \
    _tmp
  shift \
    2
  _hosts=(
    "$@"
  )
  if [[ "${quiet}" != "y" ]]; then
    _mediasplit_opts+=(
      -v
    )
    _remote_encoder_opts+=(
      -v
    )
    _vidcat_opts+=(
      -v
    )
  fi
  _tmp="$( \
    mktemp \
      -d)"
  _msg_info \
    "Splitting in chunks"
  tree \
    "${_tmp}"
  _h=1
  if (( 1 < "${#_hosts[@]}" )); then
    _mediasplit_opts+=(
      -n
        "${#_hosts[@]}"
    )
    mediasplit \
      "${_mediasplit_opts[@]}" \
      "${_in}" \
      "${_tmp}/chunk"
    for _host in "${_hosts[@]}"; do
      _encoder_opts=(
        "${_remote_encoder_opts[@]}"
        -t
          "${_host}"
      )
      _vid="${_tmp}/chunk.compressed.${_h}.mp4"
      _vids+=(
        "${_vid}"
      )
      _run \
        "encode_${_host}" \
        "0" \
        "async" \
        remote-encoder \
          "${_encoder_opts[@]}" \
          "${_tmp}/chunk.${_h}.mp4" \
          "${_vid}" || \
        true || \
        true
      _pids+=(
        "$(_get_pid \
             "encode_${_host}")"
      )
      _h="$((_h + 1))"
    done
    wait \
      "${_pids[@]}" || \
      true
    _msg_info \
      "Merging encoded chunks"
    vidcat \
      "${_vidcat_opts[@]}" \
      "${_out}" \
      "${_vids[@]}" || \
      true
    rm \
      -rf \
      "${_tmp}"
    if [[ "${quiet}" != "y" ]]; then
      tree \
        "${_tmp}"
    fi
  elif [[ 1 == "${#_hosts[@]}" ]]; then
    _encoder_opts=(
      "${_remote_encoder_opts[@]}"
      -t
        "${_hosts}"
    )
    remote-encoder \
      "${_encoder_opts[@]}" \
      "${_in}" \
      "${_out}" || \
    true
  fi
}

_set_overrides() {
  _set_override \
    "encode" \
    "date" \
    "$(_get_date_human)"
  if [[ "${target_hosts[*]}" == "" ]]; then
    target_hosts+=(
      "$(hotnamectl)"
    )
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "              Encode date:   $(_get "encode" "date")"
  _msg_info "                  In file:   $(_get "in" "file")"
  _msg_info "                 Out file:   $(_get "out" "file")"
  _msg_info "             Target hosts:   $(_get "target" "hosts")"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Encode files using multiple remote encoders

Usage:
  $(_get "app" "name")
    [options]
  options:
     -t <host>            Target encoder.
                          Default: $(_get "target" "hosts")
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    't:cvh?' \
    arg; do
  case \
    "${arg}" in
    t) target_hosts+=(
         "${OPTARG}"
       ) ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
(( "$#" < 2 )) && \
  _msg_error \
    "Add an input and an output file argument" \
    0 && \
  _set_overrides && \
  _usage \
    1
(( 0 < "$#" )) && \
  _set \
    "in" \
    "file" \
    "${1}"
(( 1 < "$#" )) && \
  _set \
    "out" \
    "file" \
    "${2}"
_set_overrides
app_opts=(
  "$(_get \
       "in" \
       "file")"
  "$(_get \
       "out" \
       "file")"
  "${target_hosts[@]}"
)
_show_config
_distributed_encoder \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
